<script>
	(function($) {
		$j.widget("ui.combobox", {
			_create : function() {
				var input,
				    self = this,
				    select = this.element.hide(),
				    selected = select.children(":selected"),
				    value = selected.val() ? selected.text() : "",
				    wrapper = this.wrapper = $j("<span>").addClass("ui-combobox").insertAfter(select);

				input = $j("<input>").appendTo(wrapper).val(value).addClass("ui-state-default ui-combobox-input").autocomplete({
					delay : 0,
					minLength : 0,
					source : function(request, response) {
						var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");

						response(select.find("option").map(function() {
							var text = $j(this).text(),
							    category = $j(this).closest("optgroup").attr("label");
							if (this.value && (!request.term || matcher.test(text) || matcher.test(category)))
								return {
									label : text.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + $.ui.autocomplete.escapeRegex(request.term) + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>"),
									value : text,
									option : this,
									category : category
								};
							//MK
							$j('#test').attr('style', 'display: none;');
						}).get());
					},
					select : function(event, ui) {
						ui.item.option.selected = true;
						self._trigger("selected", event, {
							item : ui.item.option
						});
					},
					change : function(event, ui) {
						if (!ui.item) {
							var matcher = new RegExp("^" + $.ui.autocomplete.escapeRegex($j(this).val()) + "$", "i"),
							    valid = false;
							select.children("option").each(function() {
								if ($j(this).text().match(matcher)) {
									this.selected = valid = true;
									return false;
								}
							});
							if (!valid) {
								$j('#test').attr('style', 'display: block;');
								// remove invalid value, as it didn't match anything
								//$j( this ).val( "" );
								//select.val( "" );
								//input.data( "autocomplete" ).term = "";
								//return false;
							}
						}
					}
				}).addClass("ui-widget ui-widget-content ui-corner-left");

				input.data("autocomplete")._renderItem = function(ul, item) {
					return $j("<li></li>").data("item.autocomplete", item).append("<a>" + item.label + "</a>").appendTo(ul);
				};

				input.data("autocomplete")._renderMenu = function(ul, items) {
					var self = this,
					    currentCategory = "";
					$.each(items, function(index, item) {
						if (item.category != currentCategory) {
							if (item.category) {
								ul.append("<li class='ui-autocomplete-category'>" + item.category + "</li>");
							}
							currentCategory = item.category;
						}
						self._renderItem(ul, item);
					});
				};

				$j("<a>").attr("tabIndex", -1).attr("title", "Show All Items").appendTo(wrapper).button({
					icons : {
						primary : "ui-icon-triangle-1-s"
					},
					text : false
				}).removeClass("ui-corner-all").addClass("ui-corner-right ui-combobox-toggle").click(function() {
					// close if already visible
					if (input.autocomplete("widget").is(":visible")) {
						input.autocomplete("close");
						return;
					}

					// work around a bug (likely same cause as #5265)
					$j(this).blur();

					// pass empty string as value to search for, displaying all results
					input.autocomplete("search", "");
					input.focus();
				});
			},

			destroy : function() {
				this.wrapper.remove();
				this.element.show();
				$.Widget.prototype.destroy.call(this);
			}
		});
	})(jQuery);

	$j(function() {
		$j(".select3").combobox();
		$j("#toggle").click(function() {
			$j("#combobox").toggle();
		});
	}); 
</script>

<div class="nested-fields">
	<table class="table table-striped table-bordered">
		<tr>
			<td> <%= f.label :client %> </td>
			<td>
			<div class="ui-widget">
				<%= f.grouped_collection_select(:contact_id, @client, :contacts, :name, :id, :first_name_and_last_name, {:include_blank => true}, {class: 'select3', id: 'combobox'} )%>
			</div>
			</td>
			<td> <%= link_to_remove_association '<span class="glyphicon glyphicon-trash"></span>'.html_safe, f, class: "btn btn-danger" %></td>
		</tr>
	</table>
</div>
